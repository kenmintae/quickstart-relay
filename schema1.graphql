input CreatePost {
  description: String!
  imageUrl: String!
}

input CreatePostInput {
  description: String!
  imageUrl: String!
  clientMutationId: String!
}

type CreatePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
}

scalar DateTime

input DeletePostInput {
  id: ID!
  clientMutationId: String!
}

type DeletePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
  deletedId: ID
}

type HelloPayload {
  message: String!
}

input InvokeFunctionInput {
  name: String!
  input: String!
  clientMutationId: String
}

type InvokeFunctionPayload {
  result: String!
  clientMutationId: String
}

type Mutation {
  createPost(input: CreatePostInput!): CreatePostPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  updateOrCreatePost(input: UpdateOrCreatePostInput!): UpdateOrCreatePostPayload
  deletePost(input: DeletePostInput!): DeletePostPayload
  invokeFunction(input: InvokeFunctionInput!): InvokeFunctionPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!

  hasPreviousPage: Boolean!

  startCursor: String

  endCursor: String
}

type Post implements Node {
  createdAt: DateTime!
  description: String!
  id: ID!
  imageUrl: String!
  updatedAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!

  edges: [PostEdge]

  count: Int!
}

type PostEdge {
  node: Post!

  cursor: String!
}

input PostFilter {
  AND: [PostFilter!]

  OR: [PostFilter!]
  createdAt: DateTime

  createdAt_not: DateTime

  createdAt_in: [DateTime!]

  createdAt_not_in: [DateTime!]

  createdAt_lt: DateTime

  createdAt_lte: DateTime

  createdAt_gt: DateTime

  createdAt_gte: DateTime
  description: String

  description_not: String

  description_in: [String!]

  description_not_in: [String!]

  description_lt: String

  description_lte: String
  description_gt: String

  description_gte: String

  description_contains: String

  description_not_contains: String

  description_starts_with: String

  description_not_starts_with: String

  description_ends_with: String

  description_not_ends_with: String
  id: ID

  id_not: ID

  id_in: [ID!]

  id_not_in: [ID!]

  id_lt: ID

  id_lte: ID

  id_gt: ID

  id_gte: ID

  id_contains: ID

  id_not_contains: ID

  id_starts_with: ID

  id_not_starts_with: ID

  id_ends_with: ID

  id_not_ends_with: ID
  imageUrl: String

  imageUrl_not: String

  imageUrl_in: [String!]

  imageUrl_not_in: [String!]

  imageUrl_lt: String

  imageUrl_lte: String

  imageUrl_gt: String

  imageUrl_gte: String

  imageUrl_contains: String

  imageUrl_not_contains: String

  imageUrl_starts_with: String

  imageUrl_not_starts_with: String

  imageUrl_ends_with: String

  imageUrl_not_ends_with: String
  updatedAt: DateTime

  updatedAt_not: DateTime

  updatedAt_in: [DateTime!]

  updatedAt_not_in: [DateTime!]

  updatedAt_lt: DateTime

  updatedAt_lte: DateTime

  updatedAt_gt: DateTime

  updatedAt_gte: DateTime
}

enum PostOrderBy {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Query {
  viewer: Viewer!

  node(id: ID!): Node
}

input UpdateOrCreatePostInput {
  update: UpdatePost!
  create: CreatePost!
  clientMutationId: String!
}

type UpdateOrCreatePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
}

input UpdatePost {
  description: String
  id: ID!
  imageUrl: String
}

input UpdatePostInput {
  description: String
  id: ID!
  imageUrl: String
  clientMutationId: String!
}

type UpdatePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
}

type Viewer {
  allPosts(
    filter: PostFilter
    orderBy: PostOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PostConnection!
  Post(id: ID): Post
  hello(name: String): HelloPayload
  id: ID!
}
